app song_pair {
  wasp: {
    version: "^0.12.3"
  },
  title: "Song Pair",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
   system: PostgreSQL,
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/add-songs"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
  id            Int       @id @default(autoincrement())
  // Define other fields...
  songs    Song[]    // Assuming this represents songs added by the user
  selectedSongs Song[]    @relation("UserSelectedSongs")
psl=}

entity Song {=psl
  id          Int      @id @default(autoincrement())
  title       String
  artist      String
  albumArt    String
  eloRating   Int      @default(1500)
  userId      Int     // Make sure this is defined if tracking the user who added the song
  user        User    @relation(fields: [userId], references: [id]) // Adjusted for optional linkage
  selectedBy  User[]   @relation("UserSelectedSongs")
psl=}




action addSong {
  fn: import { addSong } from "@src/actions.js",
  entities: [Song]
}

action updateSongRating {
  fn: import { updateSongRating } from "@src/actions.js",
  entities: [Song]
}

action saveUserSongSelections {
  fn: import { saveUserSongSelections } from "@src/actions.js",
  entities: [User, Song]
}

action selectSong {
  fn: import { selectSong } from "@src/actions.js",
  entities: [User, Song]
}

query getAllSongs {
  fn: import { getAllSongs } from "@src/queries.js",
  entities: [Song]
}


query getTwoSongs {
  fn: import { getTwoSongs } from "@src/queries.js",
  entities: [Song]
}

query getTopSongs {
  fn: import { getTopSongs } from "@src/queries.js",
  entities: [Song]
}

route SongVotingRoute { path: "/vote", to: SongVotingPage }
page SongVotingPage {
  component: import SongVotingPage from "@src/pages/SongVoting.jsx",
  authRequired: true
}

route LeaderboardRoute { path: "/leaderboard", to: LeaderboardPage }
page LeaderboardPage {
  component: import LeaderboardPage from "@src/pages/Leaderboard.jsx",
}

route AdminDashboardRoute { path: "/add-songs", to: AdminDashboardPage }
page AdminDashboardPage {
  component: import AdminDashboardPage from "@src/pages/AdminDashboard.jsx",
  authRequired: true
}

route HomeRoute { path: "/", to: HomePage }
page HomePage { component: import HomePage from "@src/pages/Home.jsx" }